// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Like {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  createdAt DateTime @default(now())

  @@id([userId, postId])
}

model Post {
  id        String   @id @default(uuid())
  title     String
  slug      String   @unique
  content   String
  published Boolean  @default(false)
  views     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category    Category?  @relation(fields: [categoryId], references: [id])
  categoryId  String?

  comments    Comment[]
  likes       Like[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  post      Post     @relation(fields: [postId], references: [id])
  postId    String

  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model User {
  id        String   @id @default(uuid())
  username  String?
  password  String?    
  email     String     @unique
  googleId  String?    
  image     String?
  createdAt DateTime @default(now())

  comments  Comment[]
  likes     Like[]
}

model Category {
  id    String   @id @default(uuid())
  name  String   @unique
  posts Post[]
}

model Admin {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
}